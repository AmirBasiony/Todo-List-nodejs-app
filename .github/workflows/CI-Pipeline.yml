name: CI/CD Pipeline for Todo Node.js App

on:
  push:
    branches: [ "main" ]  # Trigger on push to main branch

# env:
#   AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
#   AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
#   IMAGE_NAME: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/todo-nodejs-app
  
env:
  AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  IMAGE_NAME: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/todo-nodejs-app
  EC2_INSTANCE_IDs: "i-0565c3d1b7f00d3df i-0078bb04aa9ce7ce2"  # Comma-separated list of EC2 instance IDs

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
  

        # Prepare a dynamic image tag
      - name: Prepare image name and tag
        id: prepare_image
        run: |
          VERSION=$(jq -r .version package.json)
          BUILD_ID=${{ github.run_number }}
          IMAGE_TAG="v$VERSION.$BUILD_ID"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

  
      # Build and push the Docker image
      - name: Build and tag Docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .

      
      # Push the Docker image to the registry
      - name: Push Docker image
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          
          docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.IMAGE_NAME }}:latest


  deploy-via-ssm:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2


      - name: Copy docker-compose.yml content to EC2 via SSM
        run: | #Send SSM command to EC2 instance
          FILE_CONTENT=$(base64 -w 0 docker-compose.yml)
          COPY_COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids ${{ env.EC2_INSTANCE_IDs }} \
            --comment "Copy docker-compose.yml to EC2" \
            --parameters 'commands=[
              "echo '$FILE_CONTENT' | base64 -d > docker-compose.yml"
            ]' \
            --output text \
            --query "Command.CommandId")
          echo "COPY_COMMAND_ID=$COPY_COMMAND_ID" >> $GITHUB_ENV

          
      - name: Wait for Copy command to finish
        run: |
          for INSTANCE_ID in ${{ env.EC2_INSTANCE_IDs }}; do
            echo "Waiting for command to complete on $INSTANCE_ID"
            aws ssm wait command-executed --command-id $COPY_COMMAND_ID --instance-id $INSTANCE_ID
          done
            
      - name: Show SSM Copy command logs
        run: |
            for INSTANCE_ID in ${{ env.EC2_INSTANCE_IDs }}; do
              echo "Logs for $INSTANCE_ID:"
              aws ssm get-command-invocation --command-id $COPY_COMMAND_ID --instance-id $INSTANCE_ID
            done

      - name: Send SSM Deploy command to EC2 instance
        id: send_ssm_command
        run: |
          COMMANDS_TO_EXECUTE="export IMAGE_NAME='${{ env.IMAGE_NAME }}:latest' && \
          docker pull \$IMAGE_NAME && \ 
          cd ~ && docker compose -f docker-compose.yml down || true && \
          docker compose -f docker-compose.yml up -d && \
          docker ps"

          DEPLOY_COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids ${{ env.EC2_INSTANCE_IDs }} \
            --parameters "commands=[$COMMANDS_TO_EXECUTE]" \
            --query "Command.CommandId" \
            --output text)

          echo "DEPLOY_COMMAND_ID=$DEPLOY_COMMAND_ID" >> $GITHUB_ENV

      - name: Wait for Deploy command to finish
        run: |
          for INSTANCE_ID in ${{ env.EC2_INSTANCE_IDs }}; do
            echo "Waiting for command to complete on $INSTANCE_ID"
            aws ssm wait command-executed --command-id $DEPLOY_COMMAND_ID --instance-id $INSTANCE_ID
          done
          
      - name: Show SSM Deploy command logs
        run: |
            for INSTANCE_ID in ${{ env.EC2_INSTANCE_IDs }}; do
              echo "Logs for $INSTANCE_ID:"
              aws ssm get-command-invocation --command-id $DEPLOY_COMMAND_ID --instance-id $INSTANCE_ID
            done
        