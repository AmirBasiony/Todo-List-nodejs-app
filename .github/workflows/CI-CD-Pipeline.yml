name: CI/CD Pipeline for Todo Node.js App
on:
  push:
    branches: [ "main" ]  # Trigger on push to main branch
env:
  AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  IMAGE_NAME: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/todo-nodejs-app

jobs:
  get-ec2-ids:
    name: Extract EC2 Instance IDs
    runs-on: ubuntu-latest
    outputs:
      EC2_INSTANCE_IDs: ${{ steps.extract.outputs.instance_ids }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.5
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: |
            pwd
            cd terraform
            pwd
            terraform init

      - name: Extract EC2 Instance IDs
        id: extract
        run: |
          cd terraform
          IDS="$(terraform output -raw web_server_private1_id) $(terraform output -raw web_server_private2_id)"
          echo "instance_ids=$IDS"
          echo "instance_ids=$IDS" >> $GITHUB_OUTPUT

  build-and-push:
    needs: get-ec2-ids
    runs-on: ubuntu-latest
    env:
      EC2_INSTANCE_IDs: ${{ needs.get-ec2-ids.outputs.EC2_INSTANCE_IDs }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
  
        # Prepare a dynamic image tag
      - name: Prepare image name and tag
        id: prepare_image
        run: |
          VERSION=$(jq -r .version package.json)
          BUILD_ID=${{ github.run_number }}
          IMAGE_TAG="v$VERSION.$BUILD_ID"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
      # Build and push the Docker image
      - name: Build and tag Docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push Docker image
        run: |
          
          docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.IMAGE_NAME }}:latest

  deploy-via-ssm:
    needs: [get-ec2-ids , build-and-push]
    runs-on: ubuntu-latest
    env:
      EC2_INSTANCE_IDs: ${{ needs.get-ec2-ids.outputs.EC2_INSTANCE_IDs }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2
    

    - name: Upload .env and docker-compose.yml to EC2 via SSM
      run: |
        sed -i '/^IMAGE_NAME=/d' .env || true
        sed -i '/^mongoDbUrl=/d' .env || true

        echo "MONGO_DB_URL=${{ secrets.MONGO_DB_URL }}" > .env
        echo "IMAGE_NAME=${{ env.IMAGE_NAME }}:latest" >> .env
        cat .env
      
        ENV_FILE_CONTENT=$(base64 -w 0 .env)
        COMPOSE_FILE_CONTENT=$(base64 -w 0 docker-compose.yml)
    
        COPY_COMMAND_ID=$(aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --instance-ids ${{ env.EC2_INSTANCE_IDs }} \
          --comment "Upload .env and docker-compose.yml" \
          --parameters 'commands=[  
            "echo '"$ENV_FILE_CONTENT"' | base64 -d > /home/ubuntu/.env",
            "echo '"$COMPOSE_FILE_CONTENT"' | base64 -d > /home/ubuntu/docker-compose.yml",
            "cat /home/ubuntu/.env",
            "cat /home/ubuntu/docker-compose.yml"
          ]' \
          --output text \
          --query "Command.CommandId")
    
        echo "COPY_COMMAND_ID=$COPY_COMMAND_ID" >> $GITHUB_ENV

           
    - name: Wait for Copy command to finish
      if: always()
      run: |
        for INSTANCE_ID in ${{ env.EC2_INSTANCE_IDs }}; do
          echo "Waiting for command to complete on $INSTANCE_ID"
          aws ssm wait command-executed --command-id $COPY_COMMAND_ID --instance-id $INSTANCE_ID
        done
          
    - name: Show SSM Copy command logs
      if: always()
      run: |
          for INSTANCE_ID in ${{ env.EC2_INSTANCE_IDs }}; do
            echo "Logs for $INSTANCE_ID:"
            aws ssm get-command-invocation --command-id $COPY_COMMAND_ID --instance-id $INSTANCE_ID
          done

    - name: Send SSM Deploy command to EC2 instances
      run: |
        cat .env

        DEPLOY_COMMAND_ID=$(aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --instance-ids ${{ env.EC2_INSTANCE_IDs }} \
          --comment "Deploy latest app version" \
          --parameters 'commands=[
            "aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com",
            "docker-compose -f /home/ubuntu/docker-compose.yml down || true",
            "docker-compose -f /home/ubuntu/docker-compose.yml up -d"]' \
          --output text \
          --query "Command.CommandId")

        echo "DEPLOY_COMMAND_ID=$DEPLOY_COMMAND_ID" >> $GITHUB_ENV
    
    
    - name: Wait for Deploy command to finish
      if: always()
      run: |
        for INSTANCE_ID in ${{ env.EC2_INSTANCE_IDs }}; do
          echo "Waiting for command to complete on $INSTANCE_ID"
          aws ssm wait command-executed --command-id $DEPLOY_COMMAND_ID --instance-id $INSTANCE_ID
        done

    - name: Show SSM Deploy command logs
      if: always()
      run: |
          for INSTANCE_ID in ${{ env.EC2_INSTANCE_IDs }}; do
            echo "Logs for $INSTANCE_ID:"
            aws ssm get-command-invocation --command-id $DEPLOY_COMMAND_ID --instance-id $INSTANCE_ID
          done
